#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Курсовая_Чуваев
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FarComp_Aibolit")]
	public partial class FarCompDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertЗаболевания(Заболевания instance);
    partial void UpdateЗаболевания(Заболевания instance);
    partial void DeleteЗаболевания(Заболевания instance);
    partial void InsertЗаказ_по_фирме(Заказ_по_фирме instance);
    partial void UpdateЗаказ_по_фирме(Заказ_по_фирме instance);
    partial void DeleteЗаказ_по_фирме(Заказ_по_фирме instance);
    partial void InsertПоказания_к_применению(Показания_к_применению instance);
    partial void UpdateПоказания_к_применению(Показания_к_применению instance);
    partial void DeleteПоказания_к_применению(Показания_к_применению instance);
    partial void InsertПрайс_цен(Прайс_цен instance);
    partial void UpdateПрайс_цен(Прайс_цен instance);
    partial void DeleteПрайс_цен(Прайс_цен instance);
    partial void InsertПрепараты(Препараты instance);
    partial void UpdateПрепараты(Препараты instance);
    partial void DeleteПрепараты(Препараты instance);
    partial void InsertФирмы(Фирмы instance);
    partial void UpdateФирмы(Фирмы instance);
    partial void DeleteФирмы(Фирмы instance);
    partial void InsertСодержимое_заказа(Содержимое_заказа instance);
    partial void UpdateСодержимое_заказа(Содержимое_заказа instance);
    partial void DeleteСодержимое_заказа(Содержимое_заказа instance);
    #endregion
		
		public FarCompDataContext() : 
				base(global::Курсовая_Чуваев.Properties.Settings.Default.FarComp_AibolitConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FarCompDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FarCompDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FarCompDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FarCompDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Заболевания> Заболеванияs
		{
			get
			{
				return this.GetTable<Заболевания>();
			}
		}
		
		public System.Data.Linq.Table<Заказ_по_фирме> Заказ_по_фирмеs
		{
			get
			{
				return this.GetTable<Заказ_по_фирме>();
			}
		}
		
		public System.Data.Linq.Table<Показания_к_применению> Показания_к_применениюs
		{
			get
			{
				return this.GetTable<Показания_к_применению>();
			}
		}
		
		public System.Data.Linq.Table<Прайс_цен> Прайс_ценs
		{
			get
			{
				return this.GetTable<Прайс_цен>();
			}
		}
		
		public System.Data.Linq.Table<Препараты> Препаратыs
		{
			get
			{
				return this.GetTable<Препараты>();
			}
		}
		
		public System.Data.Linq.Table<Фирмы> Фирмыs
		{
			get
			{
				return this.GetTable<Фирмы>();
			}
		}
		
		public System.Data.Linq.Table<Содержимое_заказа> Содержимое_заказаs
		{
			get
			{
				return this.GetTable<Содержимое_заказа>();
			}
		}
		
		[Function(Name="dbo.sel")]
		public ISingleResult<selResult> sel([Parameter(DbType="NChar(150)")] string se)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), se);
			return ((ISingleResult<selResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.показания_к_применению_по_заболеванию")]
		public ISingleResult<показания_к_применению_по_заболеваниюResult> показания_к_применению_по_заболеванию([Parameter(DbType="NChar(50)")] string zabolevanie)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), zabolevanie);
			return ((ISingleResult<показания_к_применению_по_заболеваниюResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.БАД")]
		public ISingleResult<БАДResult> БАД()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<БАДResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Витамин")]
		public ISingleResult<ВитаминResult> Витамин()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ВитаминResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Косметика")]
		public ISingleResult<КосметикаResult> Косметика()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<КосметикаResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Лекарство")]
		public ISingleResult<ЛекарствоResult> Лекарство()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ЛекарствоResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Поиск_препарата")]
		public ISingleResult<Поиск_препаратаResult> Поиск_препарата([Parameter(DbType="NChar(150)")] string nazv)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nazv);
			return ((ISingleResult<Поиск_препаратаResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Поиск_фирмы")]
		public ISingleResult<Поиск_фирмыResult> Поиск_фирмы([Parameter(DbType="NChar(30)")] string nazv)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nazv);
			return ((ISingleResult<Поиск_фирмыResult>)(result.ReturnValue));
		}

        internal object показания_к_применению_по_заболеванию()
        {
            throw new NotImplementedException();
        }
    }
	
	[Table(Name="dbo.Заболевания")]
	public partial class Заболевания : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Шифр_заболевания;
		
		private string _При_зболеваниях;
		
		private string _Тип_препарата;
		
		private EntitySet<Показания_к_применению> _Показания_к_применениюs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnШифр_заболеванияChanging(string value);
    partial void OnШифр_заболеванияChanged();
    partial void OnПри_зболеванияхChanging(string value);
    partial void OnПри_зболеванияхChanged();
    partial void OnТип_препаратаChanging(string value);
    partial void OnТип_препаратаChanged();
    #endregion
		
		public Заболевания()
		{
			this._Показания_к_применениюs = new EntitySet<Показания_к_применению>(new Action<Показания_к_применению>(this.attach_Показания_к_применениюs), new Action<Показания_к_применению>(this.detach_Показания_к_применениюs));
			OnCreated();
		}
		
		[Column(Storage="_Шифр_заболевания", DbType="NChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Шифр_заболевания
		{
			get
			{
				return this._Шифр_заболевания;
			}
			set
			{
				if ((this._Шифр_заболевания != value))
				{
					this.OnШифр_заболеванияChanging(value);
					this.SendPropertyChanging();
					this._Шифр_заболевания = value;
					this.SendPropertyChanged("Шифр_заболевания");
					this.OnШифр_заболеванияChanged();
				}
			}
		}
		
		[Column(Storage="_При_зболеваниях", DbType="NChar(50)")]
		public string При_зболеваниях
		{
			get
			{
				return this._При_зболеваниях;
			}
			set
			{
				if ((this._При_зболеваниях != value))
				{
					this.OnПри_зболеванияхChanging(value);
					this.SendPropertyChanging();
					this._При_зболеваниях = value;
					this.SendPropertyChanged("При_зболеваниях");
					this.OnПри_зболеванияхChanged();
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this.OnТип_препаратаChanging(value);
					this.SendPropertyChanging();
					this._Тип_препарата = value;
					this.SendPropertyChanged("Тип_препарата");
					this.OnТип_препаратаChanged();
				}
			}
		}
		
		[Association(Name="Заболевания_Показания_к_применению", Storage="_Показания_к_применениюs", OtherKey="При_заболеваниях")]
		public EntitySet<Показания_к_применению> Показания_к_применениюs
		{
			get
			{
				return this._Показания_к_применениюs;
			}
			set
			{
				this._Показания_к_применениюs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Показания_к_применениюs(Показания_к_применению entity)
		{
			this.SendPropertyChanging();
			entity.Заболевания = this;
		}
		
		private void detach_Показания_к_применениюs(Показания_к_применению entity)
		{
			this.SendPropertyChanging();
			entity.Заболевания = null;
		}
	}
	
	[Table(Name="dbo.Заказ_по_фирме")]
	public partial class Заказ_по_фирме : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NЗаказа;
		
		private System.Nullable<int> _Шифр_фирмы;
		
		private System.Nullable<System.DateTime> _Дата_заказа;
		
		private System.Nullable<decimal> _Итого_к_оплате_за_заказ;
		
		private EntitySet<Содержимое_заказа> _Содержимое_заказаs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNЗаказаChanging(int value);
    partial void OnNЗаказаChanged();
    partial void OnШифр_фирмыChanging(System.Nullable<int> value);
    partial void OnШифр_фирмыChanged();
    partial void OnДата_заказаChanging(System.Nullable<System.DateTime> value);
    partial void OnДата_заказаChanged();
    partial void OnИтого_к_оплате_за_заказChanging(System.Nullable<decimal> value);
    partial void OnИтого_к_оплате_за_заказChanged();
    #endregion
		
		public Заказ_по_фирме()
		{
			this._Содержимое_заказаs = new EntitySet<Содержимое_заказа>(new Action<Содержимое_заказа>(this.attach_Содержимое_заказаs), new Action<Содержимое_заказа>(this.detach_Содержимое_заказаs));
			OnCreated();
		}
		
		[Column(Storage="_NЗаказа", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NЗаказа
		{
			get
			{
				return this._NЗаказа;
			}
			set
			{
				if ((this._NЗаказа != value))
				{
					this.OnNЗаказаChanging(value);
					this.SendPropertyChanging();
					this._NЗаказа = value;
					this.SendPropertyChanged("NЗаказа");
					this.OnNЗаказаChanged();
				}
			}
		}
		
		[Column(Storage="_Шифр_фирмы", DbType="Int")]
		public System.Nullable<int> Шифр_фирмы
		{
			get
			{
				return this._Шифр_фирмы;
			}
			set
			{
				if ((this._Шифр_фирмы != value))
				{
					this.OnШифр_фирмыChanging(value);
					this.SendPropertyChanging();
					this._Шифр_фирмы = value;
					this.SendPropertyChanged("Шифр_фирмы");
					this.OnШифр_фирмыChanged();
				}
			}
		}
		
		[Column(Storage="_Дата_заказа", DbType="DateTime")]
		public System.Nullable<System.DateTime> Дата_заказа
		{
			get
			{
				return this._Дата_заказа;
			}
			set
			{
				if ((this._Дата_заказа != value))
				{
					this.OnДата_заказаChanging(value);
					this.SendPropertyChanging();
					this._Дата_заказа = value;
					this.SendPropertyChanged("Дата_заказа");
					this.OnДата_заказаChanged();
				}
			}
		}
		
		[Column(Storage="_Итого_к_оплате_за_заказ", DbType="Money")]
		public System.Nullable<decimal> Итого_к_оплате_за_заказ
		{
			get
			{
				return this._Итого_к_оплате_за_заказ;
			}
			set
			{
				if ((this._Итого_к_оплате_за_заказ != value))
				{
					this.OnИтого_к_оплате_за_заказChanging(value);
					this.SendPropertyChanging();
					this._Итого_к_оплате_за_заказ = value;
					this.SendPropertyChanged("Итого_к_оплате_за_заказ");
					this.OnИтого_к_оплате_за_заказChanged();
				}
			}
		}
		
		[Association(Name="Заказ_по_фирме_Содержимое_заказа", Storage="_Содержимое_заказаs", OtherKey="NЗаказа")]
		public EntitySet<Содержимое_заказа> Содержимое_заказаs
		{
			get
			{
				return this._Содержимое_заказаs;
			}
			set
			{
				this._Содержимое_заказаs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Содержимое_заказаs(Содержимое_заказа entity)
		{
			this.SendPropertyChanging();
			entity.Заказ_по_фирме = this;
		}
		
		private void detach_Содержимое_заказаs(Содержимое_заказа entity)
		{
			this.SendPropertyChanging();
			entity.Заказ_по_фирме = null;
		}
	}
	
	[Table(Name="dbo.Показания_к_применению")]
	public partial class Показания_к_применению : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NПрепарата;
		
		private string _При_заболеваниях;
		
		private string _Доза;
		
		private string _Побочные___действия;
		
		private string _Противопоказания;
		
		private string _Взаимодействие_с_другими_препаратами;
		
		private string _Показания_к_применению1;
		
		private string _Особые_указания;
		
		private string _Передозировка;
		
		private EntityRef<Заболевания> _Заболевания;
		
		private EntityRef<Препараты> _Препараты;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNПрепаратаChanging(int value);
    partial void OnNПрепаратаChanged();
    partial void OnПри_заболеванияхChanging(string value);
    partial void OnПри_заболеванияхChanged();
    partial void OnДозаChanging(string value);
    partial void OnДозаChanged();
    partial void OnПобочные___действияChanging(string value);
    partial void OnПобочные___действияChanged();
    partial void OnПротивопоказанияChanging(string value);
    partial void OnПротивопоказанияChanged();
    partial void OnВзаимодействие_с_другими_препаратамиChanging(string value);
    partial void OnВзаимодействие_с_другими_препаратамиChanged();
    partial void OnПоказания_к_применению1Changing(string value);
    partial void OnПоказания_к_применению1Changed();
    partial void OnОсобые_указанияChanging(string value);
    partial void OnОсобые_указанияChanged();
    partial void OnПередозировкаChanging(string value);
    partial void OnПередозировкаChanged();
    #endregion
		
		public Показания_к_применению()
		{
			this._Заболевания = default(EntityRef<Заболевания>);
			this._Препараты = default(EntityRef<Препараты>);
			OnCreated();
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					if (this._Препараты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNПрепаратаChanging(value);
					this.SendPropertyChanging();
					this._NПрепарата = value;
					this.SendPropertyChanged("NПрепарата");
					this.OnNПрепаратаChanged();
				}
			}
		}
		
		[Column(Name="[При заболеваниях]", Storage="_При_заболеваниях", DbType="NChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string При_заболеваниях
		{
			get
			{
				return this._При_заболеваниях;
			}
			set
			{
				if ((this._При_заболеваниях != value))
				{
					this.OnПри_заболеванияхChanging(value);
					this.SendPropertyChanging();
					this._При_заболеваниях = value;
					this.SendPropertyChanged("При_заболеваниях");
					this.OnПри_заболеванияхChanged();
				}
			}
		}
		
		[Column(Storage="_Доза", DbType="NChar(255)")]
		public string Доза
		{
			get
			{
				return this._Доза;
			}
			set
			{
				if ((this._Доза != value))
				{
					this.OnДозаChanging(value);
					this.SendPropertyChanging();
					this._Доза = value;
					this.SendPropertyChanged("Доза");
					this.OnДозаChanged();
				}
			}
		}
		
		[Column(Name="[Побочные\r\n_действия]", Storage="_Побочные___действия", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Побочные___действия
		{
			get
			{
				return this._Побочные___действия;
			}
			set
			{
				if ((this._Побочные___действия != value))
				{
					this.OnПобочные___действияChanging(value);
					this.SendPropertyChanging();
					this._Побочные___действия = value;
					this.SendPropertyChanged("Побочные___действия");
					this.OnПобочные___действияChanged();
				}
			}
		}
		
		[Column(Storage="_Противопоказания", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Противопоказания
		{
			get
			{
				return this._Противопоказания;
			}
			set
			{
				if ((this._Противопоказания != value))
				{
					this.OnПротивопоказанияChanging(value);
					this.SendPropertyChanging();
					this._Противопоказания = value;
					this.SendPropertyChanged("Противопоказания");
					this.OnПротивопоказанияChanged();
				}
			}
		}
		
		[Column(Storage="_Взаимодействие_с_другими_препаратами", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Взаимодействие_с_другими_препаратами
		{
			get
			{
				return this._Взаимодействие_с_другими_препаратами;
			}
			set
			{
				if ((this._Взаимодействие_с_другими_препаратами != value))
				{
					this.OnВзаимодействие_с_другими_препаратамиChanging(value);
					this.SendPropertyChanging();
					this._Взаимодействие_с_другими_препаратами = value;
					this.SendPropertyChanged("Взаимодействие_с_другими_препаратами");
					this.OnВзаимодействие_с_другими_препаратамиChanged();
				}
			}
		}
		
		[Column(Name="Показания_к_применению", Storage="_Показания_к_применению1", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Показания_к_применению1
		{
			get
			{
				return this._Показания_к_применению1;
			}
			set
			{
				if ((this._Показания_к_применению1 != value))
				{
					this.OnПоказания_к_применению1Changing(value);
					this.SendPropertyChanging();
					this._Показания_к_применению1 = value;
					this.SendPropertyChanged("Показания_к_применению1");
					this.OnПоказания_к_применению1Changed();
				}
			}
		}
		
		[Column(Storage="_Особые_указания", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Особые_указания
		{
			get
			{
				return this._Особые_указания;
			}
			set
			{
				if ((this._Особые_указания != value))
				{
					this.OnОсобые_указанияChanging(value);
					this.SendPropertyChanging();
					this._Особые_указания = value;
					this.SendPropertyChanged("Особые_указания");
					this.OnОсобые_указанияChanged();
				}
			}
		}
		
		[Column(Storage="_Передозировка", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Передозировка
		{
			get
			{
				return this._Передозировка;
			}
			set
			{
				if ((this._Передозировка != value))
				{
					this.OnПередозировкаChanging(value);
					this.SendPropertyChanging();
					this._Передозировка = value;
					this.SendPropertyChanged("Передозировка");
					this.OnПередозировкаChanged();
				}
			}
		}
		
		[Association(Name="Заболевания_Показания_к_применению", Storage="_Заболевания", ThisKey="При_заболеваниях", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Заболевания Заболевания
		{
			get
			{
				return this._Заболевания.Entity;
			}
			set
			{
				Заболевания previousValue = this._Заболевания.Entity;
				if (((previousValue != value) 
							|| (this._Заболевания.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Заболевания.Entity = null;
						previousValue.Показания_к_применениюs.Remove(this);
					}
					this._Заболевания.Entity = value;
					if ((value != null))
					{
						value.Показания_к_применениюs.Add(this);
						this._При_заболеваниях = value.Шифр_заболевания;
					}
					else
					{
						this._При_заболеваниях = default(string);
					}
					this.SendPropertyChanged("Заболевания");
				}
			}
		}
		
		[Association(Name="Препараты_Показания_к_применению", Storage="_Препараты", ThisKey="NПрепарата", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Препараты Препараты
		{
			get
			{
				return this._Препараты.Entity;
			}
			set
			{
				Препараты previousValue = this._Препараты.Entity;
				if (((previousValue != value) 
							|| (this._Препараты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Препараты.Entity = null;
						previousValue.Показания_к_применениюs.Remove(this);
					}
					this._Препараты.Entity = value;
					if ((value != null))
					{
						value.Показания_к_применениюs.Add(this);
						this._NПрепарата = value.NПрепарата;
					}
					else
					{
						this._NПрепарата = default(int);
					}
					this.SendPropertyChanged("Препараты");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Прайс_цен")]
	public partial class Прайс_цен : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NПрепарата;
		
		private int _Шифр_фирмы;
		
		private System.Nullable<int> _Количество_штук;
		
		private System.Nullable<decimal> _цена;
		
		private EntityRef<Препараты> _Препараты;
		
		private EntityRef<Фирмы> _Фирмы;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNПрепаратаChanging(int value);
    partial void OnNПрепаратаChanged();
    partial void OnШифр_фирмыChanging(int value);
    partial void OnШифр_фирмыChanged();
    partial void OnКоличество_штукChanging(System.Nullable<int> value);
    partial void OnКоличество_штукChanged();
    partial void OnценаChanging(System.Nullable<decimal> value);
    partial void OnценаChanged();
    #endregion
		
		public Прайс_цен()
		{
			this._Препараты = default(EntityRef<Препараты>);
			this._Фирмы = default(EntityRef<Фирмы>);
			OnCreated();
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					if (this._Препараты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNПрепаратаChanging(value);
					this.SendPropertyChanging();
					this._NПрепарата = value;
					this.SendPropertyChanged("NПрепарата");
					this.OnNПрепаратаChanged();
				}
			}
		}
		
		[Column(Storage="_Шифр_фирмы", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Шифр_фирмы
		{
			get
			{
				return this._Шифр_фирмы;
			}
			set
			{
				if ((this._Шифр_фирмы != value))
				{
					if (this._Фирмы.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnШифр_фирмыChanging(value);
					this.SendPropertyChanging();
					this._Шифр_фирмы = value;
					this.SendPropertyChanged("Шифр_фирмы");
					this.OnШифр_фирмыChanged();
				}
			}
		}
		
		[Column(Storage="_Количество_штук", DbType="Int")]
		public System.Nullable<int> Количество_штук
		{
			get
			{
				return this._Количество_штук;
			}
			set
			{
				if ((this._Количество_штук != value))
				{
					this.OnКоличество_штукChanging(value);
					this.SendPropertyChanging();
					this._Количество_штук = value;
					this.SendPropertyChanged("Количество_штук");
					this.OnКоличество_штукChanged();
				}
			}
		}
		
		[Column(Storage="_цена", DbType="Money")]
		public System.Nullable<decimal> цена
		{
			get
			{
				return this._цена;
			}
			set
			{
				if ((this._цена != value))
				{
					this.OnценаChanging(value);
					this.SendPropertyChanging();
					this._цена = value;
					this.SendPropertyChanged("цена");
					this.OnценаChanged();
				}
			}
		}
		
		[Association(Name="Препараты_Прайс_цен", Storage="_Препараты", ThisKey="NПрепарата", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Препараты Препараты
		{
			get
			{
				return this._Препараты.Entity;
			}
			set
			{
				Препараты previousValue = this._Препараты.Entity;
				if (((previousValue != value) 
							|| (this._Препараты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Препараты.Entity = null;
						previousValue.Прайс_ценs.Remove(this);
					}
					this._Препараты.Entity = value;
					if ((value != null))
					{
						value.Прайс_ценs.Add(this);
						this._NПрепарата = value.NПрепарата;
					}
					else
					{
						this._NПрепарата = default(int);
					}
					this.SendPropertyChanged("Препараты");
				}
			}
		}
		
		[Association(Name="Фирмы_Прайс_цен", Storage="_Фирмы", ThisKey="Шифр_фирмы", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Фирмы Фирмы
		{
			get
			{
				return this._Фирмы.Entity;
			}
			set
			{
				Фирмы previousValue = this._Фирмы.Entity;
				if (((previousValue != value) 
							|| (this._Фирмы.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Фирмы.Entity = null;
						previousValue.Прайс_ценs.Remove(this);
					}
					this._Фирмы.Entity = value;
					if ((value != null))
					{
						value.Прайс_ценs.Add(this);
						this._Шифр_фирмы = value.Шифр_фирмы;
					}
					else
					{
						this._Шифр_фирмы = default(int);
					}
					this.SendPropertyChanged("Фирмы");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Препараты")]
	public partial class Препараты : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NПрепарата;
		
		private string _Регистрационный_номер;
		
		private string _Название_препарата;
		
		private string _Международное_непатентовонне_название;
		
		private string _Химическое_название;
		
		private System.Nullable<int> _Срок_хранения;
		
		private System.Data.Linq.Binary _Изображение;
		
		private string _Тип_препарата;
		
		private string _Примечание;
		
		private string _Форма_выпуска;
		
		private string _Состав_и_лекарственная_форма;
		
		private string _Фармакотерапевтическая_группа;
		
		private string _Фармакодинамика;
		
		private string _Фармакокинетика;
		
		private string _Производитель;
		
		private EntitySet<Показания_к_применению> _Показания_к_применениюs;
		
		private EntitySet<Прайс_цен> _Прайс_ценs;
		
		private EntitySet<Содержимое_заказа> _Содержимое_заказаs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNПрепаратаChanging(int value);
    partial void OnNПрепаратаChanged();
    partial void OnРегистрационный_номерChanging(string value);
    partial void OnРегистрационный_номерChanged();
    partial void OnНазвание_препаратаChanging(string value);
    partial void OnНазвание_препаратаChanged();
    partial void OnМеждународное_непатентовонне_названиеChanging(string value);
    partial void OnМеждународное_непатентовонне_названиеChanged();
    partial void OnХимическое_названиеChanging(string value);
    partial void OnХимическое_названиеChanged();
    partial void OnСрок_храненияChanging(System.Nullable<int> value);
    partial void OnСрок_храненияChanged();
    partial void OnИзображениеChanging(System.Data.Linq.Binary value);
    partial void OnИзображениеChanged();
    partial void OnТип_препаратаChanging(string value);
    partial void OnТип_препаратаChanged();
    partial void OnПримечаниеChanging(string value);
    partial void OnПримечаниеChanged();
    partial void OnФорма_выпускаChanging(string value);
    partial void OnФорма_выпускаChanged();
    partial void OnСостав_и_лекарственная_формаChanging(string value);
    partial void OnСостав_и_лекарственная_формаChanged();
    partial void OnФармакотерапевтическая_группаChanging(string value);
    partial void OnФармакотерапевтическая_группаChanged();
    partial void OnФармакодинамикаChanging(string value);
    partial void OnФармакодинамикаChanged();
    partial void OnФармакокинетикаChanging(string value);
    partial void OnФармакокинетикаChanged();
    partial void OnПроизводительChanging(string value);
    partial void OnПроизводительChanged();
    #endregion
		
		public Препараты()
		{
			this._Показания_к_применениюs = new EntitySet<Показания_к_применению>(new Action<Показания_к_применению>(this.attach_Показания_к_применениюs), new Action<Показания_к_применению>(this.detach_Показания_к_применениюs));
			this._Прайс_ценs = new EntitySet<Прайс_цен>(new Action<Прайс_цен>(this.attach_Прайс_ценs), new Action<Прайс_цен>(this.detach_Прайс_ценs));
			this._Содержимое_заказаs = new EntitySet<Содержимое_заказа>(new Action<Содержимое_заказа>(this.attach_Содержимое_заказаs), new Action<Содержимое_заказа>(this.detach_Содержимое_заказаs));
			OnCreated();
		}
		
		[Column(Storage="_NПрепарата", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					this.OnNПрепаратаChanging(value);
					this.SendPropertyChanging();
					this._NПрепарата = value;
					this.SendPropertyChanged("NПрепарата");
					this.OnNПрепаратаChanged();
				}
			}
		}
		
		[Column(Storage="_Регистрационный_номер", DbType="NChar(20)")]
		public string Регистрационный_номер
		{
			get
			{
				return this._Регистрационный_номер;
			}
			set
			{
				if ((this._Регистрационный_номер != value))
				{
					this.OnРегистрационный_номерChanging(value);
					this.SendPropertyChanging();
					this._Регистрационный_номер = value;
					this.SendPropertyChanged("Регистрационный_номер");
					this.OnРегистрационный_номерChanged();
				}
			}
		}
		
		[Column(Storage="_Название_препарата", DbType="NChar(150)")]
		public string Название_препарата
		{
			get
			{
				return this._Название_препарата;
			}
			set
			{
				if ((this._Название_препарата != value))
				{
					this.OnНазвание_препаратаChanging(value);
					this.SendPropertyChanging();
					this._Название_препарата = value;
					this.SendPropertyChanged("Название_препарата");
					this.OnНазвание_препаратаChanged();
				}
			}
		}
		
		[Column(Storage="_Международное_непатентовонне_название", DbType="NChar(50)")]
		public string Международное_непатентовонне_название
		{
			get
			{
				return this._Международное_непатентовонне_название;
			}
			set
			{
				if ((this._Международное_непатентовонне_название != value))
				{
					this.OnМеждународное_непатентовонне_названиеChanging(value);
					this.SendPropertyChanging();
					this._Международное_непатентовонне_название = value;
					this.SendPropertyChanged("Международное_непатентовонне_название");
					this.OnМеждународное_непатентовонне_названиеChanged();
				}
			}
		}
		
		[Column(Storage="_Химическое_название", DbType="NChar(100)")]
		public string Химическое_название
		{
			get
			{
				return this._Химическое_название;
			}
			set
			{
				if ((this._Химическое_название != value))
				{
					this.OnХимическое_названиеChanging(value);
					this.SendPropertyChanging();
					this._Химическое_название = value;
					this.SendPropertyChanged("Химическое_название");
					this.OnХимическое_названиеChanged();
				}
			}
		}
		
		[Column(Storage="_Срок_хранения", DbType="Int")]
		public System.Nullable<int> Срок_хранения
		{
			get
			{
				return this._Срок_хранения;
			}
			set
			{
				if ((this._Срок_хранения != value))
				{
					this.OnСрок_храненияChanging(value);
					this.SendPropertyChanging();
					this._Срок_хранения = value;
					this.SendPropertyChanged("Срок_хранения");
					this.OnСрок_храненияChanged();
				}
			}
		}
		
		[Column(Storage="_Изображение", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Изображение
		{
			get
			{
				return this._Изображение;
			}
			set
			{
				if ((this._Изображение != value))
				{
					this.OnИзображениеChanging(value);
					this.SendPropertyChanging();
					this._Изображение = value;
					this.SendPropertyChanged("Изображение");
					this.OnИзображениеChanged();
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this.OnТип_препаратаChanging(value);
					this.SendPropertyChanging();
					this._Тип_препарата = value;
					this.SendPropertyChanged("Тип_препарата");
					this.OnТип_препаратаChanged();
				}
			}
		}
		
		[Column(Storage="_Примечание", DbType="NChar(250)")]
		public string Примечание
		{
			get
			{
				return this._Примечание;
			}
			set
			{
				if ((this._Примечание != value))
				{
					this.OnПримечаниеChanging(value);
					this.SendPropertyChanging();
					this._Примечание = value;
					this.SendPropertyChanged("Примечание");
					this.OnПримечаниеChanged();
				}
			}
		}
		
		[Column(Storage="_Форма_выпуска", DbType="NChar(25)")]
		public string Форма_выпуска
		{
			get
			{
				return this._Форма_выпуска;
			}
			set
			{
				if ((this._Форма_выпуска != value))
				{
					this.OnФорма_выпускаChanging(value);
					this.SendPropertyChanging();
					this._Форма_выпуска = value;
					this.SendPropertyChanged("Форма_выпуска");
					this.OnФорма_выпускаChanged();
				}
			}
		}
		
		[Column(Storage="_Состав_и_лекарственная_форма", DbType="NChar(255)")]
		public string Состав_и_лекарственная_форма
		{
			get
			{
				return this._Состав_и_лекарственная_форма;
			}
			set
			{
				if ((this._Состав_и_лекарственная_форма != value))
				{
					this.OnСостав_и_лекарственная_формаChanging(value);
					this.SendPropertyChanging();
					this._Состав_и_лекарственная_форма = value;
					this.SendPropertyChanged("Состав_и_лекарственная_форма");
					this.OnСостав_и_лекарственная_формаChanged();
				}
			}
		}
		
		[Column(Storage="_Фармакотерапевтическая_группа", DbType="NChar(200)")]
		public string Фармакотерапевтическая_группа
		{
			get
			{
				return this._Фармакотерапевтическая_группа;
			}
			set
			{
				if ((this._Фармакотерапевтическая_группа != value))
				{
					this.OnФармакотерапевтическая_группаChanging(value);
					this.SendPropertyChanging();
					this._Фармакотерапевтическая_группа = value;
					this.SendPropertyChanged("Фармакотерапевтическая_группа");
					this.OnФармакотерапевтическая_группаChanged();
				}
			}
		}
		
		[Column(Storage="_Фармакодинамика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакодинамика
		{
			get
			{
				return this._Фармакодинамика;
			}
			set
			{
				if ((this._Фармакодинамика != value))
				{
					this.OnФармакодинамикаChanging(value);
					this.SendPropertyChanging();
					this._Фармакодинамика = value;
					this.SendPropertyChanged("Фармакодинамика");
					this.OnФармакодинамикаChanged();
				}
			}
		}
		
		[Column(Storage="_Фармакокинетика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакокинетика
		{
			get
			{
				return this._Фармакокинетика;
			}
			set
			{
				if ((this._Фармакокинетика != value))
				{
					this.OnФармакокинетикаChanging(value);
					this.SendPropertyChanging();
					this._Фармакокинетика = value;
					this.SendPropertyChanged("Фармакокинетика");
					this.OnФармакокинетикаChanged();
				}
			}
		}
		
		[Column(Storage="_Производитель", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Производитель
		{
			get
			{
				return this._Производитель;
			}
			set
			{
				if ((this._Производитель != value))
				{
					this.OnПроизводительChanging(value);
					this.SendPropertyChanging();
					this._Производитель = value;
					this.SendPropertyChanged("Производитель");
					this.OnПроизводительChanged();
				}
			}
		}
		
		[Association(Name="Препараты_Показания_к_применению", Storage="_Показания_к_применениюs", OtherKey="NПрепарата")]
		public EntitySet<Показания_к_применению> Показания_к_применениюs
		{
			get
			{
				return this._Показания_к_применениюs;
			}
			set
			{
				this._Показания_к_применениюs.Assign(value);
			}
		}
		
		[Association(Name="Препараты_Прайс_цен", Storage="_Прайс_ценs", OtherKey="NПрепарата")]
		public EntitySet<Прайс_цен> Прайс_ценs
		{
			get
			{
				return this._Прайс_ценs;
			}
			set
			{
				this._Прайс_ценs.Assign(value);
			}
		}
		
		[Association(Name="Препараты_Содержимое_заказа", Storage="_Содержимое_заказаs", OtherKey="NПрепарата")]
		public EntitySet<Содержимое_заказа> Содержимое_заказаs
		{
			get
			{
				return this._Содержимое_заказаs;
			}
			set
			{
				this._Содержимое_заказаs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Показания_к_применениюs(Показания_к_применению entity)
		{
			this.SendPropertyChanging();
			entity.Препараты = this;
		}
		
		private void detach_Показания_к_применениюs(Показания_к_применению entity)
		{
			this.SendPropertyChanging();
			entity.Препараты = null;
		}
		
		private void attach_Прайс_ценs(Прайс_цен entity)
		{
			this.SendPropertyChanging();
			entity.Препараты = this;
		}
		
		private void detach_Прайс_ценs(Прайс_цен entity)
		{
			this.SendPropertyChanging();
			entity.Препараты = null;
		}
		
		private void attach_Содержимое_заказаs(Содержимое_заказа entity)
		{
			this.SendPropertyChanging();
			entity.Препараты = this;
		}
		
		private void detach_Содержимое_заказаs(Содержимое_заказа entity)
		{
			this.SendPropertyChanging();
			entity.Препараты = null;
		}
	}
	
	[Table(Name="dbo.Фирмы")]
	public partial class Фирмы : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Шифр_фирмы;
		
		private string _Название_фирмы;
		
		private string _Адрес;
		
		private string _Телефон;
		
		private string _Идентификационный_номер;
		
		private string _Банк;
		
		private string _Расчетный_счет;
		
		private System.Nullable<int> _БИК;
		
		private string _К_с;
		
		private System.Nullable<int> _Индекс;
		
		private string _Сайт;
		
		private EntitySet<Прайс_цен> _Прайс_ценs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnШифр_фирмыChanging(int value);
    partial void OnШифр_фирмыChanged();
    partial void OnНазвание_фирмыChanging(string value);
    partial void OnНазвание_фирмыChanged();
    partial void OnАдресChanging(string value);
    partial void OnАдресChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    partial void OnИдентификационный_номерChanging(string value);
    partial void OnИдентификационный_номерChanged();
    partial void OnБанкChanging(string value);
    partial void OnБанкChanged();
    partial void OnРасчетный_счетChanging(string value);
    partial void OnРасчетный_счетChanged();
    partial void OnБИКChanging(System.Nullable<int> value);
    partial void OnБИКChanged();
    partial void OnК_сChanging(string value);
    partial void OnК_сChanged();
    partial void OnИндексChanging(System.Nullable<int> value);
    partial void OnИндексChanged();
    partial void OnСайтChanging(string value);
    partial void OnСайтChanged();
    #endregion
		
		public Фирмы()
		{
			this._Прайс_ценs = new EntitySet<Прайс_цен>(new Action<Прайс_цен>(this.attach_Прайс_ценs), new Action<Прайс_цен>(this.detach_Прайс_ценs));
			OnCreated();
		}
		
		[Column(Storage="_Шифр_фирмы", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Шифр_фирмы
		{
			get
			{
				return this._Шифр_фирмы;
			}
			set
			{
				if ((this._Шифр_фирмы != value))
				{
					this.OnШифр_фирмыChanging(value);
					this.SendPropertyChanging();
					this._Шифр_фирмы = value;
					this.SendPropertyChanged("Шифр_фирмы");
					this.OnШифр_фирмыChanged();
				}
			}
		}
		
		[Column(Storage="_Название_фирмы", DbType="NChar(30)")]
		public string Название_фирмы
		{
			get
			{
				return this._Название_фирмы;
			}
			set
			{
				if ((this._Название_фирмы != value))
				{
					this.OnНазвание_фирмыChanging(value);
					this.SendPropertyChanging();
					this._Название_фирмы = value;
					this.SendPropertyChanged("Название_фирмы");
					this.OnНазвание_фирмыChanged();
				}
			}
		}
		
		[Column(Storage="_Адрес", DbType="NChar(150)")]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this.OnАдресChanging(value);
					this.SendPropertyChanging();
					this._Адрес = value;
					this.SendPropertyChanged("Адрес");
					this.OnАдресChanged();
				}
			}
		}
		
		[Column(Storage="_Телефон", DbType="NChar(30)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[Column(Storage="_Идентификационный_номер", DbType="NChar(50)")]
		public string Идентификационный_номер
		{
			get
			{
				return this._Идентификационный_номер;
			}
			set
			{
				if ((this._Идентификационный_номер != value))
				{
					this.OnИдентификационный_номерChanging(value);
					this.SendPropertyChanging();
					this._Идентификационный_номер = value;
					this.SendPropertyChanged("Идентификационный_номер");
					this.OnИдентификационный_номерChanged();
				}
			}
		}
		
		[Column(Storage="_Банк", DbType="NChar(100)")]
		public string Банк
		{
			get
			{
				return this._Банк;
			}
			set
			{
				if ((this._Банк != value))
				{
					this.OnБанкChanging(value);
					this.SendPropertyChanging();
					this._Банк = value;
					this.SendPropertyChanged("Банк");
					this.OnБанкChanged();
				}
			}
		}
		
		[Column(Storage="_Расчетный_счет", DbType="NChar(50)")]
		public string Расчетный_счет
		{
			get
			{
				return this._Расчетный_счет;
			}
			set
			{
				if ((this._Расчетный_счет != value))
				{
					this.OnРасчетный_счетChanging(value);
					this.SendPropertyChanging();
					this._Расчетный_счет = value;
					this.SendPropertyChanged("Расчетный_счет");
					this.OnРасчетный_счетChanged();
				}
			}
		}
		
		[Column(Storage="_БИК", DbType="Int")]
		public System.Nullable<int> БИК
		{
			get
			{
				return this._БИК;
			}
			set
			{
				if ((this._БИК != value))
				{
					this.OnБИКChanging(value);
					this.SendPropertyChanging();
					this._БИК = value;
					this.SendPropertyChanged("БИК");
					this.OnБИКChanged();
				}
			}
		}
		
		[Column(Storage="_К_с", DbType="NChar(50)")]
		public string К_с
		{
			get
			{
				return this._К_с;
			}
			set
			{
				if ((this._К_с != value))
				{
					this.OnК_сChanging(value);
					this.SendPropertyChanging();
					this._К_с = value;
					this.SendPropertyChanged("К_с");
					this.OnК_сChanged();
				}
			}
		}
		
		[Column(Storage="_Индекс", DbType="Int")]
		public System.Nullable<int> Индекс
		{
			get
			{
				return this._Индекс;
			}
			set
			{
				if ((this._Индекс != value))
				{
					this.OnИндексChanging(value);
					this.SendPropertyChanging();
					this._Индекс = value;
					this.SendPropertyChanged("Индекс");
					this.OnИндексChanged();
				}
			}
		}
		
		[Column(Storage="_Сайт", DbType="NChar(50)")]
		public string Сайт
		{
			get
			{
				return this._Сайт;
			}
			set
			{
				if ((this._Сайт != value))
				{
					this.OnСайтChanging(value);
					this.SendPropertyChanging();
					this._Сайт = value;
					this.SendPropertyChanged("Сайт");
					this.OnСайтChanged();
				}
			}
		}
		
		[Association(Name="Фирмы_Прайс_цен", Storage="_Прайс_ценs", OtherKey="Шифр_фирмы")]
		public EntitySet<Прайс_цен> Прайс_ценs
		{
			get
			{
				return this._Прайс_ценs;
			}
			set
			{
				this._Прайс_ценs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Прайс_ценs(Прайс_цен entity)
		{
			this.SendPropertyChanging();
			entity.Фирмы = this;
		}
		
		private void detach_Прайс_ценs(Прайс_цен entity)
		{
			this.SendPropertyChanging();
			entity.Фирмы = null;
		}
	}
	
	[Table(Name="dbo.Содержимое_заказа")]
	public partial class Содержимое_заказа : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NПрепарата;
		
		private int _NЗаказа;
		
		private System.Nullable<int> _Кол_заказа;
		
		private System.Nullable<decimal> _К_оплате_за_товар;
		
		private EntityRef<Заказ_по_фирме> _Заказ_по_фирме;
		
		private EntityRef<Препараты> _Препараты;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNПрепаратаChanging(int value);
    partial void OnNПрепаратаChanged();
    partial void OnNЗаказаChanging(int value);
    partial void OnNЗаказаChanged();
    partial void OnКол_заказаChanging(System.Nullable<int> value);
    partial void OnКол_заказаChanged();
    partial void OnК_оплате_за_товарChanging(System.Nullable<decimal> value);
    partial void OnК_оплате_за_товарChanged();
    #endregion
		
		public Содержимое_заказа()
		{
			this._Заказ_по_фирме = default(EntityRef<Заказ_по_фирме>);
			this._Препараты = default(EntityRef<Препараты>);
			OnCreated();
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					if (this._Препараты.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNПрепаратаChanging(value);
					this.SendPropertyChanging();
					this._NПрепарата = value;
					this.SendPropertyChanged("NПрепарата");
					this.OnNПрепаратаChanged();
				}
			}
		}
		
		[Column(Storage="_NЗаказа", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int NЗаказа
		{
			get
			{
				return this._NЗаказа;
			}
			set
			{
				if ((this._NЗаказа != value))
				{
					if (this._Заказ_по_фирме.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNЗаказаChanging(value);
					this.SendPropertyChanging();
					this._NЗаказа = value;
					this.SendPropertyChanged("NЗаказа");
					this.OnNЗаказаChanged();
				}
			}
		}
		
		[Column(Storage="_Кол_заказа", DbType="Int")]
		public System.Nullable<int> Кол_заказа
		{
			get
			{
				return this._Кол_заказа;
			}
			set
			{
				if ((this._Кол_заказа != value))
				{
					this.OnКол_заказаChanging(value);
					this.SendPropertyChanging();
					this._Кол_заказа = value;
					this.SendPropertyChanged("Кол_заказа");
					this.OnКол_заказаChanged();
				}
			}
		}
		
		[Column(Storage="_К_оплате_за_товар", DbType="Money")]
		public System.Nullable<decimal> К_оплате_за_товар
		{
			get
			{
				return this._К_оплате_за_товар;
			}
			set
			{
				if ((this._К_оплате_за_товар != value))
				{
					this.OnК_оплате_за_товарChanging(value);
					this.SendPropertyChanging();
					this._К_оплате_за_товар = value;
					this.SendPropertyChanged("К_оплате_за_товар");
					this.OnК_оплате_за_товарChanged();
				}
			}
		}
		
		[Association(Name="Заказ_по_фирме_Содержимое_заказа", Storage="_Заказ_по_фирме", ThisKey="NЗаказа", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Заказ_по_фирме Заказ_по_фирме
		{
			get
			{
				return this._Заказ_по_фирме.Entity;
			}
			set
			{
				Заказ_по_фирме previousValue = this._Заказ_по_фирме.Entity;
				if (((previousValue != value) 
							|| (this._Заказ_по_фирме.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Заказ_по_фирме.Entity = null;
						previousValue.Содержимое_заказаs.Remove(this);
					}
					this._Заказ_по_фирме.Entity = value;
					if ((value != null))
					{
						value.Содержимое_заказаs.Add(this);
						this._NЗаказа = value.NЗаказа;
					}
					else
					{
						this._NЗаказа = default(int);
					}
					this.SendPropertyChanged("Заказ_по_фирме");
				}
			}
		}
		
		[Association(Name="Препараты_Содержимое_заказа", Storage="_Препараты", ThisKey="NПрепарата", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Препараты Препараты
		{
			get
			{
				return this._Препараты.Entity;
			}
			set
			{
				Препараты previousValue = this._Препараты.Entity;
				if (((previousValue != value) 
							|| (this._Препараты.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Препараты.Entity = null;
						previousValue.Содержимое_заказаs.Remove(this);
					}
					this._Препараты.Entity = value;
					if ((value != null))
					{
						value.Содержимое_заказаs.Add(this);
						this._NПрепарата = value.NПрепарата;
					}
					else
					{
						this._NПрепарата = default(int);
					}
					this.SendPropertyChanged("Препараты");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class selResult
	{
		
		private int _NПрепарата;
		
		private string _Регистрационный_номер;
		
		private string _Название_препарата;
		
		private string _Международное_непатентовонне_название;
		
		private string _Химическое_название;
		
		private System.Nullable<int> _Срок_хранения;
		
		private System.Data.Linq.Binary _Изображение;
		
		private string _Тип_препарата;
		
		private string _Примечание;
		
		private string _Форма_выпуска;
		
		private string _Состав_и_лекарственная_форма;
		
		private string _Фармакотерапевтическая_группа;
		
		private string _Фармакодинамика;
		
		private string _Фармакокинетика;
		
		private string _Производитель;
		
		private System.Nullable<decimal> _цена;
		
		private System.Nullable<int> _Количество_штук;
		
		private string _Название_фирмы;
		
		private string _Адрес;
		
		private string _Телефон;
		
		private string _Сайт;
		
		public selResult()
		{
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL")]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					this._NПрепарата = value;
				}
			}
		}
		
		[Column(Storage="_Регистрационный_номер", DbType="NChar(20)")]
		public string Регистрационный_номер
		{
			get
			{
				return this._Регистрационный_номер;
			}
			set
			{
				if ((this._Регистрационный_номер != value))
				{
					this._Регистрационный_номер = value;
				}
			}
		}
		
		[Column(Storage="_Название_препарата", DbType="NChar(150)")]
		public string Название_препарата
		{
			get
			{
				return this._Название_препарата;
			}
			set
			{
				if ((this._Название_препарата != value))
				{
					this._Название_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Международное_непатентовонне_название", DbType="NChar(50)")]
		public string Международное_непатентовонне_название
		{
			get
			{
				return this._Международное_непатентовонне_название;
			}
			set
			{
				if ((this._Международное_непатентовонне_название != value))
				{
					this._Международное_непатентовонне_название = value;
				}
			}
		}
		
		[Column(Storage="_Химическое_название", DbType="NChar(100)")]
		public string Химическое_название
		{
			get
			{
				return this._Химическое_название;
			}
			set
			{
				if ((this._Химическое_название != value))
				{
					this._Химическое_название = value;
				}
			}
		}
		
		[Column(Storage="_Срок_хранения", DbType="Int")]
		public System.Nullable<int> Срок_хранения
		{
			get
			{
				return this._Срок_хранения;
			}
			set
			{
				if ((this._Срок_хранения != value))
				{
					this._Срок_хранения = value;
				}
			}
		}
		
		[Column(Storage="_Изображение", DbType="Image")]
		public System.Data.Linq.Binary Изображение
		{
			get
			{
				return this._Изображение;
			}
			set
			{
				if ((this._Изображение != value))
				{
					this._Изображение = value;
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this._Тип_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Примечание", DbType="NChar(250)")]
		public string Примечание
		{
			get
			{
				return this._Примечание;
			}
			set
			{
				if ((this._Примечание != value))
				{
					this._Примечание = value;
				}
			}
		}
		
		[Column(Storage="_Форма_выпуска", DbType="NChar(25)")]
		public string Форма_выпуска
		{
			get
			{
				return this._Форма_выпуска;
			}
			set
			{
				if ((this._Форма_выпуска != value))
				{
					this._Форма_выпуска = value;
				}
			}
		}
		
		[Column(Storage="_Состав_и_лекарственная_форма", DbType="NChar(255)")]
		public string Состав_и_лекарственная_форма
		{
			get
			{
				return this._Состав_и_лекарственная_форма;
			}
			set
			{
				if ((this._Состав_и_лекарственная_форма != value))
				{
					this._Состав_и_лекарственная_форма = value;
				}
			}
		}
		
		[Column(Storage="_Фармакотерапевтическая_группа", DbType="NChar(200)")]
		public string Фармакотерапевтическая_группа
		{
			get
			{
				return this._Фармакотерапевтическая_группа;
			}
			set
			{
				if ((this._Фармакотерапевтическая_группа != value))
				{
					this._Фармакотерапевтическая_группа = value;
				}
			}
		}
		
		[Column(Storage="_Фармакодинамика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакодинамика
		{
			get
			{
				return this._Фармакодинамика;
			}
			set
			{
				if ((this._Фармакодинамика != value))
				{
					this._Фармакодинамика = value;
				}
			}
		}
		
		[Column(Storage="_Фармакокинетика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакокинетика
		{
			get
			{
				return this._Фармакокинетика;
			}
			set
			{
				if ((this._Фармакокинетика != value))
				{
					this._Фармакокинетика = value;
				}
			}
		}
		
		[Column(Storage="_Производитель", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Производитель
		{
			get
			{
				return this._Производитель;
			}
			set
			{
				if ((this._Производитель != value))
				{
					this._Производитель = value;
				}
			}
		}
		
		[Column(Storage="_цена", DbType="Money")]
		public System.Nullable<decimal> цена
		{
			get
			{
				return this._цена;
			}
			set
			{
				if ((this._цена != value))
				{
					this._цена = value;
				}
			}
		}
		
		[Column(Storage="_Количество_штук", DbType="Int")]
		public System.Nullable<int> Количество_штук
		{
			get
			{
				return this._Количество_штук;
			}
			set
			{
				if ((this._Количество_штук != value))
				{
					this._Количество_штук = value;
				}
			}
		}
		
		[Column(Storage="_Название_фирмы", DbType="NChar(30)")]
		public string Название_фирмы
		{
			get
			{
				return this._Название_фирмы;
			}
			set
			{
				if ((this._Название_фирмы != value))
				{
					this._Название_фирмы = value;
				}
			}
		}
		
		[Column(Storage="_Адрес", DbType="NChar(150)")]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this._Адрес = value;
				}
			}
		}
		
		[Column(Storage="_Телефон", DbType="NChar(30)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this._Телефон = value;
				}
			}
		}
		
		[Column(Storage="_Сайт", DbType="NChar(50)")]
		public string Сайт
		{
			get
			{
				return this._Сайт;
			}
			set
			{
				if ((this._Сайт != value))
				{
					this._Сайт = value;
				}
			}
		}
	}
	
	public partial class показания_к_применению_по_заболеваниюResult
	{
		
		private string _При_зболеваниях;
		
		private string _Тип_препарата;
		
		private int _NПрепарата;
		
		private string _При_заболеваниях;
		
		private string _Доза;
		
		private string _Побочные___действия;
		
		private string _Противопоказания;
		
		private string _Взаимодействие_с_другими_препаратами;
		
		private string _Показания_к_применению;
		
		private string _Особые_указания;
		
		private string _Передозировка;
		
		private string _Название_препарата;
		
		public показания_к_применению_по_заболеваниюResult()
		{
		}
		
		[Column(Storage="_При_зболеваниях", DbType="NChar(50)")]
		public string При_зболеваниях
		{
			get
			{
				return this._При_зболеваниях;
			}
			set
			{
				if ((this._При_зболеваниях != value))
				{
					this._При_зболеваниях = value;
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this._Тип_препарата = value;
				}
			}
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL")]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					this._NПрепарата = value;
				}
			}
		}
		
		[Column(Name="[При заболеваниях]", Storage="_При_заболеваниях", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string При_заболеваниях
		{
			get
			{
				return this._При_заболеваниях;
			}
			set
			{
				if ((this._При_заболеваниях != value))
				{
					this._При_заболеваниях = value;
				}
			}
		}
		
		[Column(Storage="_Доза", DbType="NChar(255)")]
		public string Доза
		{
			get
			{
				return this._Доза;
			}
			set
			{
				if ((this._Доза != value))
				{
					this._Доза = value;
				}
			}
		}
		
		[Column(Name="[Побочные\r\n_действия]", Storage="_Побочные___действия", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Побочные___действия
		{
			get
			{
				return this._Побочные___действия;
			}
			set
			{
				if ((this._Побочные___действия != value))
				{
					this._Побочные___действия = value;
				}
			}
		}
		
		[Column(Storage="_Противопоказания", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Противопоказания
		{
			get
			{
				return this._Противопоказания;
			}
			set
			{
				if ((this._Противопоказания != value))
				{
					this._Противопоказания = value;
				}
			}
		}
		
		[Column(Storage="_Взаимодействие_с_другими_препаратами", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Взаимодействие_с_другими_препаратами
		{
			get
			{
				return this._Взаимодействие_с_другими_препаратами;
			}
			set
			{
				if ((this._Взаимодействие_с_другими_препаратами != value))
				{
					this._Взаимодействие_с_другими_препаратами = value;
				}
			}
		}
		
		[Column(Storage="_Показания_к_применению", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Показания_к_применению
		{
			get
			{
				return this._Показания_к_применению;
			}
			set
			{
				if ((this._Показания_к_применению != value))
				{
					this._Показания_к_применению = value;
				}
			}
		}
		
		[Column(Storage="_Особые_указания", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Особые_указания
		{
			get
			{
				return this._Особые_указания;
			}
			set
			{
				if ((this._Особые_указания != value))
				{
					this._Особые_указания = value;
				}
			}
		}
		
		[Column(Storage="_Передозировка", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Передозировка
		{
			get
			{
				return this._Передозировка;
			}
			set
			{
				if ((this._Передозировка != value))
				{
					this._Передозировка = value;
				}
			}
		}
		
		[Column(Storage="_Название_препарата", DbType="NChar(150)")]
		public string Название_препарата
		{
			get
			{
				return this._Название_препарата;
			}
			set
			{
				if ((this._Название_препарата != value))
				{
					this._Название_препарата = value;
				}
			}
		}
	}
	
	public partial class БАДResult
	{
		
		private int _NПрепарата;
		
		private string _Регистрационный_номер;
		
		private string _Название_препарата;
		
		private string _Международное_непатентовонне_название;
		
		private string _Химическое_название;
		
		private System.Nullable<int> _Срок_хранения;
		
		private System.Data.Linq.Binary _Изображение;
		
		private string _Тип_препарата;
		
		private string _Примечание;
		
		private string _Форма_выпуска;
		
		private string _Состав_и_лекарственная_форма;
		
		private string _Фармакотерапевтическая_группа;
		
		private string _Фармакодинамика;
		
		private string _Фармакокинетика;
		
		private string _Производитель;
		
		public БАДResult()
		{
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL")]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					this._NПрепарата = value;
				}
			}
		}
		
		[Column(Storage="_Регистрационный_номер", DbType="NChar(20)")]
		public string Регистрационный_номер
		{
			get
			{
				return this._Регистрационный_номер;
			}
			set
			{
				if ((this._Регистрационный_номер != value))
				{
					this._Регистрационный_номер = value;
				}
			}
		}
		
		[Column(Storage="_Название_препарата", DbType="NChar(150)")]
		public string Название_препарата
		{
			get
			{
				return this._Название_препарата;
			}
			set
			{
				if ((this._Название_препарата != value))
				{
					this._Название_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Международное_непатентовонне_название", DbType="NChar(50)")]
		public string Международное_непатентовонне_название
		{
			get
			{
				return this._Международное_непатентовонне_название;
			}
			set
			{
				if ((this._Международное_непатентовонне_название != value))
				{
					this._Международное_непатентовонне_название = value;
				}
			}
		}
		
		[Column(Storage="_Химическое_название", DbType="NChar(100)")]
		public string Химическое_название
		{
			get
			{
				return this._Химическое_название;
			}
			set
			{
				if ((this._Химическое_название != value))
				{
					this._Химическое_название = value;
				}
			}
		}
		
		[Column(Storage="_Срок_хранения", DbType="Int")]
		public System.Nullable<int> Срок_хранения
		{
			get
			{
				return this._Срок_хранения;
			}
			set
			{
				if ((this._Срок_хранения != value))
				{
					this._Срок_хранения = value;
				}
			}
		}
		
		[Column(Storage="_Изображение", DbType="Image")]
		public System.Data.Linq.Binary Изображение
		{
			get
			{
				return this._Изображение;
			}
			set
			{
				if ((this._Изображение != value))
				{
					this._Изображение = value;
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this._Тип_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Примечание", DbType="NChar(250)")]
		public string Примечание
		{
			get
			{
				return this._Примечание;
			}
			set
			{
				if ((this._Примечание != value))
				{
					this._Примечание = value;
				}
			}
		}
		
		[Column(Storage="_Форма_выпуска", DbType="NChar(25)")]
		public string Форма_выпуска
		{
			get
			{
				return this._Форма_выпуска;
			}
			set
			{
				if ((this._Форма_выпуска != value))
				{
					this._Форма_выпуска = value;
				}
			}
		}
		
		[Column(Storage="_Состав_и_лекарственная_форма", DbType="NChar(255)")]
		public string Состав_и_лекарственная_форма
		{
			get
			{
				return this._Состав_и_лекарственная_форма;
			}
			set
			{
				if ((this._Состав_и_лекарственная_форма != value))
				{
					this._Состав_и_лекарственная_форма = value;
				}
			}
		}
		
		[Column(Storage="_Фармакотерапевтическая_группа", DbType="NChar(200)")]
		public string Фармакотерапевтическая_группа
		{
			get
			{
				return this._Фармакотерапевтическая_группа;
			}
			set
			{
				if ((this._Фармакотерапевтическая_группа != value))
				{
					this._Фармакотерапевтическая_группа = value;
				}
			}
		}
		
		[Column(Storage="_Фармакодинамика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакодинамика
		{
			get
			{
				return this._Фармакодинамика;
			}
			set
			{
				if ((this._Фармакодинамика != value))
				{
					this._Фармакодинамика = value;
				}
			}
		}
		
		[Column(Storage="_Фармакокинетика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакокинетика
		{
			get
			{
				return this._Фармакокинетика;
			}
			set
			{
				if ((this._Фармакокинетика != value))
				{
					this._Фармакокинетика = value;
				}
			}
		}
		
		[Column(Storage="_Производитель", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Производитель
		{
			get
			{
				return this._Производитель;
			}
			set
			{
				if ((this._Производитель != value))
				{
					this._Производитель = value;
				}
			}
		}
	}
	
	public partial class ВитаминResult
	{
		
		private int _NПрепарата;
		
		private string _Регистрационный_номер;
		
		private string _Название_препарата;
		
		private string _Международное_непатентовонне_название;
		
		private string _Химическое_название;
		
		private System.Nullable<int> _Срок_хранения;
		
		private System.Data.Linq.Binary _Изображение;
		
		private string _Тип_препарата;
		
		private string _Примечание;
		
		private string _Форма_выпуска;
		
		private string _Состав_и_лекарственная_форма;
		
		private string _Фармакотерапевтическая_группа;
		
		private string _Фармакодинамика;
		
		private string _Фармакокинетика;
		
		private string _Производитель;
		
		public ВитаминResult()
		{
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL")]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					this._NПрепарата = value;
				}
			}
		}
		
		[Column(Storage="_Регистрационный_номер", DbType="NChar(20)")]
		public string Регистрационный_номер
		{
			get
			{
				return this._Регистрационный_номер;
			}
			set
			{
				if ((this._Регистрационный_номер != value))
				{
					this._Регистрационный_номер = value;
				}
			}
		}
		
		[Column(Storage="_Название_препарата", DbType="NChar(150)")]
		public string Название_препарата
		{
			get
			{
				return this._Название_препарата;
			}
			set
			{
				if ((this._Название_препарата != value))
				{
					this._Название_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Международное_непатентовонне_название", DbType="NChar(50)")]
		public string Международное_непатентовонне_название
		{
			get
			{
				return this._Международное_непатентовонне_название;
			}
			set
			{
				if ((this._Международное_непатентовонне_название != value))
				{
					this._Международное_непатентовонне_название = value;
				}
			}
		}
		
		[Column(Storage="_Химическое_название", DbType="NChar(100)")]
		public string Химическое_название
		{
			get
			{
				return this._Химическое_название;
			}
			set
			{
				if ((this._Химическое_название != value))
				{
					this._Химическое_название = value;
				}
			}
		}
		
		[Column(Storage="_Срок_хранения", DbType="Int")]
		public System.Nullable<int> Срок_хранения
		{
			get
			{
				return this._Срок_хранения;
			}
			set
			{
				if ((this._Срок_хранения != value))
				{
					this._Срок_хранения = value;
				}
			}
		}
		
		[Column(Storage="_Изображение", DbType="Image")]
		public System.Data.Linq.Binary Изображение
		{
			get
			{
				return this._Изображение;
			}
			set
			{
				if ((this._Изображение != value))
				{
					this._Изображение = value;
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this._Тип_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Примечание", DbType="NChar(250)")]
		public string Примечание
		{
			get
			{
				return this._Примечание;
			}
			set
			{
				if ((this._Примечание != value))
				{
					this._Примечание = value;
				}
			}
		}
		
		[Column(Storage="_Форма_выпуска", DbType="NChar(25)")]
		public string Форма_выпуска
		{
			get
			{
				return this._Форма_выпуска;
			}
			set
			{
				if ((this._Форма_выпуска != value))
				{
					this._Форма_выпуска = value;
				}
			}
		}
		
		[Column(Storage="_Состав_и_лекарственная_форма", DbType="NChar(255)")]
		public string Состав_и_лекарственная_форма
		{
			get
			{
				return this._Состав_и_лекарственная_форма;
			}
			set
			{
				if ((this._Состав_и_лекарственная_форма != value))
				{
					this._Состав_и_лекарственная_форма = value;
				}
			}
		}
		
		[Column(Storage="_Фармакотерапевтическая_группа", DbType="NChar(200)")]
		public string Фармакотерапевтическая_группа
		{
			get
			{
				return this._Фармакотерапевтическая_группа;
			}
			set
			{
				if ((this._Фармакотерапевтическая_группа != value))
				{
					this._Фармакотерапевтическая_группа = value;
				}
			}
		}
		
		[Column(Storage="_Фармакодинамика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакодинамика
		{
			get
			{
				return this._Фармакодинамика;
			}
			set
			{
				if ((this._Фармакодинамика != value))
				{
					this._Фармакодинамика = value;
				}
			}
		}
		
		[Column(Storage="_Фармакокинетика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакокинетика
		{
			get
			{
				return this._Фармакокинетика;
			}
			set
			{
				if ((this._Фармакокинетика != value))
				{
					this._Фармакокинетика = value;
				}
			}
		}
		
		[Column(Storage="_Производитель", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Производитель
		{
			get
			{
				return this._Производитель;
			}
			set
			{
				if ((this._Производитель != value))
				{
					this._Производитель = value;
				}
			}
		}
	}
	
	public partial class КосметикаResult
	{
		
		private int _NПрепарата;
		
		private string _Регистрационный_номер;
		
		private string _Название_препарата;
		
		private string _Международное_непатентовонне_название;
		
		private string _Химическое_название;
		
		private System.Nullable<int> _Срок_хранения;
		
		private System.Data.Linq.Binary _Изображение;
		
		private string _Тип_препарата;
		
		private string _Примечание;
		
		private string _Форма_выпуска;
		
		private string _Состав_и_лекарственная_форма;
		
		private string _Фармакотерапевтическая_группа;
		
		private string _Фармакодинамика;
		
		private string _Фармакокинетика;
		
		private string _Производитель;
		
		public КосметикаResult()
		{
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL")]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					this._NПрепарата = value;
				}
			}
		}
		
		[Column(Storage="_Регистрационный_номер", DbType="NChar(20)")]
		public string Регистрационный_номер
		{
			get
			{
				return this._Регистрационный_номер;
			}
			set
			{
				if ((this._Регистрационный_номер != value))
				{
					this._Регистрационный_номер = value;
				}
			}
		}
		
		[Column(Storage="_Название_препарата", DbType="NChar(150)")]
		public string Название_препарата
		{
			get
			{
				return this._Название_препарата;
			}
			set
			{
				if ((this._Название_препарата != value))
				{
					this._Название_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Международное_непатентовонне_название", DbType="NChar(50)")]
		public string Международное_непатентовонне_название
		{
			get
			{
				return this._Международное_непатентовонне_название;
			}
			set
			{
				if ((this._Международное_непатентовонне_название != value))
				{
					this._Международное_непатентовонне_название = value;
				}
			}
		}
		
		[Column(Storage="_Химическое_название", DbType="NChar(100)")]
		public string Химическое_название
		{
			get
			{
				return this._Химическое_название;
			}
			set
			{
				if ((this._Химическое_название != value))
				{
					this._Химическое_название = value;
				}
			}
		}
		
		[Column(Storage="_Срок_хранения", DbType="Int")]
		public System.Nullable<int> Срок_хранения
		{
			get
			{
				return this._Срок_хранения;
			}
			set
			{
				if ((this._Срок_хранения != value))
				{
					this._Срок_хранения = value;
				}
			}
		}
		
		[Column(Storage="_Изображение", DbType="Image")]
		public System.Data.Linq.Binary Изображение
		{
			get
			{
				return this._Изображение;
			}
			set
			{
				if ((this._Изображение != value))
				{
					this._Изображение = value;
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this._Тип_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Примечание", DbType="NChar(250)")]
		public string Примечание
		{
			get
			{
				return this._Примечание;
			}
			set
			{
				if ((this._Примечание != value))
				{
					this._Примечание = value;
				}
			}
		}
		
		[Column(Storage="_Форма_выпуска", DbType="NChar(25)")]
		public string Форма_выпуска
		{
			get
			{
				return this._Форма_выпуска;
			}
			set
			{
				if ((this._Форма_выпуска != value))
				{
					this._Форма_выпуска = value;
				}
			}
		}
		
		[Column(Storage="_Состав_и_лекарственная_форма", DbType="NChar(255)")]
		public string Состав_и_лекарственная_форма
		{
			get
			{
				return this._Состав_и_лекарственная_форма;
			}
			set
			{
				if ((this._Состав_и_лекарственная_форма != value))
				{
					this._Состав_и_лекарственная_форма = value;
				}
			}
		}
		
		[Column(Storage="_Фармакотерапевтическая_группа", DbType="NChar(200)")]
		public string Фармакотерапевтическая_группа
		{
			get
			{
				return this._Фармакотерапевтическая_группа;
			}
			set
			{
				if ((this._Фармакотерапевтическая_группа != value))
				{
					this._Фармакотерапевтическая_группа = value;
				}
			}
		}
		
		[Column(Storage="_Фармакодинамика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакодинамика
		{
			get
			{
				return this._Фармакодинамика;
			}
			set
			{
				if ((this._Фармакодинамика != value))
				{
					this._Фармакодинамика = value;
				}
			}
		}
		
		[Column(Storage="_Фармакокинетика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакокинетика
		{
			get
			{
				return this._Фармакокинетика;
			}
			set
			{
				if ((this._Фармакокинетика != value))
				{
					this._Фармакокинетика = value;
				}
			}
		}
		
		[Column(Storage="_Производитель", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Производитель
		{
			get
			{
				return this._Производитель;
			}
			set
			{
				if ((this._Производитель != value))
				{
					this._Производитель = value;
				}
			}
		}
	}
	
	public partial class ЛекарствоResult
	{
		
		private int _NПрепарата;
		
		private string _Регистрационный_номер;
		
		private string _Название_препарата;
		
		private string _Международное_непатентовонне_название;
		
		private string _Химическое_название;
		
		private System.Nullable<int> _Срок_хранения;
		
		private System.Data.Linq.Binary _Изображение;
		
		private string _Тип_препарата;
		
		private string _Примечание;
		
		private string _Форма_выпуска;
		
		private string _Состав_и_лекарственная_форма;
		
		private string _Фармакотерапевтическая_группа;
		
		private string _Фармакодинамика;
		
		private string _Фармакокинетика;
		
		private string _Производитель;
		
		public ЛекарствоResult()
		{
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL")]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					this._NПрепарата = value;
				}
			}
		}
		
		[Column(Storage="_Регистрационный_номер", DbType="NChar(20)")]
		public string Регистрационный_номер
		{
			get
			{
				return this._Регистрационный_номер;
			}
			set
			{
				if ((this._Регистрационный_номер != value))
				{
					this._Регистрационный_номер = value;
				}
			}
		}
		
		[Column(Storage="_Название_препарата", DbType="NChar(150)")]
		public string Название_препарата
		{
			get
			{
				return this._Название_препарата;
			}
			set
			{
				if ((this._Название_препарата != value))
				{
					this._Название_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Международное_непатентовонне_название", DbType="NChar(50)")]
		public string Международное_непатентовонне_название
		{
			get
			{
				return this._Международное_непатентовонне_название;
			}
			set
			{
				if ((this._Международное_непатентовонне_название != value))
				{
					this._Международное_непатентовонне_название = value;
				}
			}
		}
		
		[Column(Storage="_Химическое_название", DbType="NChar(100)")]
		public string Химическое_название
		{
			get
			{
				return this._Химическое_название;
			}
			set
			{
				if ((this._Химическое_название != value))
				{
					this._Химическое_название = value;
				}
			}
		}
		
		[Column(Storage="_Срок_хранения", DbType="Int")]
		public System.Nullable<int> Срок_хранения
		{
			get
			{
				return this._Срок_хранения;
			}
			set
			{
				if ((this._Срок_хранения != value))
				{
					this._Срок_хранения = value;
				}
			}
		}
		
		[Column(Storage="_Изображение", DbType="Image")]
		public System.Data.Linq.Binary Изображение
		{
			get
			{
				return this._Изображение;
			}
			set
			{
				if ((this._Изображение != value))
				{
					this._Изображение = value;
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this._Тип_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Примечание", DbType="NChar(250)")]
		public string Примечание
		{
			get
			{
				return this._Примечание;
			}
			set
			{
				if ((this._Примечание != value))
				{
					this._Примечание = value;
				}
			}
		}
		
		[Column(Storage="_Форма_выпуска", DbType="NChar(25)")]
		public string Форма_выпуска
		{
			get
			{
				return this._Форма_выпуска;
			}
			set
			{
				if ((this._Форма_выпуска != value))
				{
					this._Форма_выпуска = value;
				}
			}
		}
		
		[Column(Storage="_Состав_и_лекарственная_форма", DbType="NChar(255)")]
		public string Состав_и_лекарственная_форма
		{
			get
			{
				return this._Состав_и_лекарственная_форма;
			}
			set
			{
				if ((this._Состав_и_лекарственная_форма != value))
				{
					this._Состав_и_лекарственная_форма = value;
				}
			}
		}
		
		[Column(Storage="_Фармакотерапевтическая_группа", DbType="NChar(200)")]
		public string Фармакотерапевтическая_группа
		{
			get
			{
				return this._Фармакотерапевтическая_группа;
			}
			set
			{
				if ((this._Фармакотерапевтическая_группа != value))
				{
					this._Фармакотерапевтическая_группа = value;
				}
			}
		}
		
		[Column(Storage="_Фармакодинамика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакодинамика
		{
			get
			{
				return this._Фармакодинамика;
			}
			set
			{
				if ((this._Фармакодинамика != value))
				{
					this._Фармакодинамика = value;
				}
			}
		}
		
		[Column(Storage="_Фармакокинетика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакокинетика
		{
			get
			{
				return this._Фармакокинетика;
			}
			set
			{
				if ((this._Фармакокинетика != value))
				{
					this._Фармакокинетика = value;
				}
			}
		}
		
		[Column(Storage="_Производитель", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Производитель
		{
			get
			{
				return this._Производитель;
			}
			set
			{
				if ((this._Производитель != value))
				{
					this._Производитель = value;
				}
			}
		}
	}
	
	public partial class Поиск_препаратаResult
	{
		
		private int _NПрепарата;
		
		private string _Регистрационный_номер;
		
		private string _Название_препарата;
		
		private string _Международное_непатентовонне_название;
		
		private string _Химическое_название;
		
		private System.Nullable<int> _Срок_хранения;
		
		private System.Data.Linq.Binary _Изображение;
		
		private string _Тип_препарата;
		
		private string _Примечание;
		
		private string _Форма_выпуска;
		
		private string _Состав_и_лекарственная_форма;
		
		private string _Фармакотерапевтическая_группа;
		
		private string _Фармакодинамика;
		
		private string _Фармакокинетика;
		
		private string _Производитель;
		
		public Поиск_препаратаResult()
		{
		}
		
		[Column(Storage="_NПрепарата", DbType="Int NOT NULL")]
		public int NПрепарата
		{
			get
			{
				return this._NПрепарата;
			}
			set
			{
				if ((this._NПрепарата != value))
				{
					this._NПрепарата = value;
				}
			}
		}
		
		[Column(Storage="_Регистрационный_номер", DbType="NChar(20)")]
		public string Регистрационный_номер
		{
			get
			{
				return this._Регистрационный_номер;
			}
			set
			{
				if ((this._Регистрационный_номер != value))
				{
					this._Регистрационный_номер = value;
				}
			}
		}
		
		[Column(Storage="_Название_препарата", DbType="NChar(150)")]
		public string Название_препарата
		{
			get
			{
				return this._Название_препарата;
			}
			set
			{
				if ((this._Название_препарата != value))
				{
					this._Название_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Международное_непатентовонне_название", DbType="NChar(50)")]
		public string Международное_непатентовонне_название
		{
			get
			{
				return this._Международное_непатентовонне_название;
			}
			set
			{
				if ((this._Международное_непатентовонне_название != value))
				{
					this._Международное_непатентовонне_название = value;
				}
			}
		}
		
		[Column(Storage="_Химическое_название", DbType="NChar(100)")]
		public string Химическое_название
		{
			get
			{
				return this._Химическое_название;
			}
			set
			{
				if ((this._Химическое_название != value))
				{
					this._Химическое_название = value;
				}
			}
		}
		
		[Column(Storage="_Срок_хранения", DbType="Int")]
		public System.Nullable<int> Срок_хранения
		{
			get
			{
				return this._Срок_хранения;
			}
			set
			{
				if ((this._Срок_хранения != value))
				{
					this._Срок_хранения = value;
				}
			}
		}
		
		[Column(Storage="_Изображение", DbType="Image")]
		public System.Data.Linq.Binary Изображение
		{
			get
			{
				return this._Изображение;
			}
			set
			{
				if ((this._Изображение != value))
				{
					this._Изображение = value;
				}
			}
		}
		
		[Column(Storage="_Тип_препарата", DbType="NChar(20)")]
		public string Тип_препарата
		{
			get
			{
				return this._Тип_препарата;
			}
			set
			{
				if ((this._Тип_препарата != value))
				{
					this._Тип_препарата = value;
				}
			}
		}
		
		[Column(Storage="_Примечание", DbType="NChar(250)")]
		public string Примечание
		{
			get
			{
				return this._Примечание;
			}
			set
			{
				if ((this._Примечание != value))
				{
					this._Примечание = value;
				}
			}
		}
		
		[Column(Storage="_Форма_выпуска", DbType="NChar(25)")]
		public string Форма_выпуска
		{
			get
			{
				return this._Форма_выпуска;
			}
			set
			{
				if ((this._Форма_выпуска != value))
				{
					this._Форма_выпуска = value;
				}
			}
		}
		
		[Column(Storage="_Состав_и_лекарственная_форма", DbType="NChar(255)")]
		public string Состав_и_лекарственная_форма
		{
			get
			{
				return this._Состав_и_лекарственная_форма;
			}
			set
			{
				if ((this._Состав_и_лекарственная_форма != value))
				{
					this._Состав_и_лекарственная_форма = value;
				}
			}
		}
		
		[Column(Storage="_Фармакотерапевтическая_группа", DbType="NChar(200)")]
		public string Фармакотерапевтическая_группа
		{
			get
			{
				return this._Фармакотерапевтическая_группа;
			}
			set
			{
				if ((this._Фармакотерапевтическая_группа != value))
				{
					this._Фармакотерапевтическая_группа = value;
				}
			}
		}
		
		[Column(Storage="_Фармакодинамика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакодинамика
		{
			get
			{
				return this._Фармакодинамика;
			}
			set
			{
				if ((this._Фармакодинамика != value))
				{
					this._Фармакодинамика = value;
				}
			}
		}
		
		[Column(Storage="_Фармакокинетика", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Фармакокинетика
		{
			get
			{
				return this._Фармакокинетика;
			}
			set
			{
				if ((this._Фармакокинетика != value))
				{
					this._Фармакокинетика = value;
				}
			}
		}
		
		[Column(Storage="_Производитель", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Производитель
		{
			get
			{
				return this._Производитель;
			}
			set
			{
				if ((this._Производитель != value))
				{
					this._Производитель = value;
				}
			}
		}
	}
	
	public partial class Поиск_фирмыResult
	{
		
		private int _Шифр_фирмы;
		
		private string _Название_фирмы;
		
		private string _Адрес;
		
		private string _Телефон;
		
		private string _Идентификационный_номер;
		
		private string _Банк;
		
		private string _Расчетный_счет;
		
		private System.Nullable<int> _БИК;
		
		private string _К_с;
		
		private System.Nullable<int> _Индекс;
		
		private string _Сайт;
		
		public Поиск_фирмыResult()
		{
		}
		
		[Column(Storage="_Шифр_фирмы", DbType="Int NOT NULL")]
		public int Шифр_фирмы
		{
			get
			{
				return this._Шифр_фирмы;
			}
			set
			{
				if ((this._Шифр_фирмы != value))
				{
					this._Шифр_фирмы = value;
				}
			}
		}
		
		[Column(Storage="_Название_фирмы", DbType="NChar(30)")]
		public string Название_фирмы
		{
			get
			{
				return this._Название_фирмы;
			}
			set
			{
				if ((this._Название_фирмы != value))
				{
					this._Название_фирмы = value;
				}
			}
		}
		
		[Column(Storage="_Адрес", DbType="NChar(150)")]
		public string Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				if ((this._Адрес != value))
				{
					this._Адрес = value;
				}
			}
		}
		
		[Column(Storage="_Телефон", DbType="NChar(30)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this._Телефон = value;
				}
			}
		}
		
		[Column(Storage="_Идентификационный_номер", DbType="NChar(50)")]
		public string Идентификационный_номер
		{
			get
			{
				return this._Идентификационный_номер;
			}
			set
			{
				if ((this._Идентификационный_номер != value))
				{
					this._Идентификационный_номер = value;
				}
			}
		}
		
		[Column(Storage="_Банк", DbType="NChar(100)")]
		public string Банк
		{
			get
			{
				return this._Банк;
			}
			set
			{
				if ((this._Банк != value))
				{
					this._Банк = value;
				}
			}
		}
		
		[Column(Storage="_Расчетный_счет", DbType="NChar(50)")]
		public string Расчетный_счет
		{
			get
			{
				return this._Расчетный_счет;
			}
			set
			{
				if ((this._Расчетный_счет != value))
				{
					this._Расчетный_счет = value;
				}
			}
		}
		
		[Column(Storage="_БИК", DbType="Int")]
		public System.Nullable<int> БИК
		{
			get
			{
				return this._БИК;
			}
			set
			{
				if ((this._БИК != value))
				{
					this._БИК = value;
				}
			}
		}
		
		[Column(Storage="_К_с", DbType="NChar(50)")]
		public string К_с
		{
			get
			{
				return this._К_с;
			}
			set
			{
				if ((this._К_с != value))
				{
					this._К_с = value;
				}
			}
		}
		
		[Column(Storage="_Индекс", DbType="Int")]
		public System.Nullable<int> Индекс
		{
			get
			{
				return this._Индекс;
			}
			set
			{
				if ((this._Индекс != value))
				{
					this._Индекс = value;
				}
			}
		}
		
		[Column(Storage="_Сайт", DbType="NChar(50)")]
		public string Сайт
		{
			get
			{
				return this._Сайт;
			}
			set
			{
				if ((this._Сайт != value))
				{
					this._Сайт = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
